"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View.js"));

var config = _interopRequireWildcard(require("../config.js"));

var helpers = _interopRequireWildcard(require("../helpers.js"));

var _hourlyViewMarkup = _interopRequireDefault(require("./hourlyViewMarkup.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class HourlyView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", config.hourlyWeatherDiv);

    _defineProperty(this, "_hoursPerPage", 4);

    _defineProperty(this, "_totalHours", 48);

    _defineProperty(this, "_page", 1);
  }

  _generateMarkup() {
    const setUnit = config.unit === 'metric' ? '°C' : '°F';
    return this._data.hourly.map(cur => {
      return `<div class="one-hour">
    <div class="col-1">
        <p class="hour">${cur.time}:00</p>
    </div>
    <div class="col-2">
    ${helpers.addCurrentImages(cur.id, this._data.current.time, this._data.current.sunrise, this._data.current.sunset)}

    </div>
    <div class="col-3">
    <p class="temperature">${cur.temperature}${setUnit}</p>
    </div>
    </div>`;
    }).join('');
  }

  _generateMarkup2() {
    return this._data.hourly.map(cur => _hourlyViewMarkup.default.render(cur, false)).join('');
  }

  slideRight() {
    let width = document.querySelector('.one-hour').offsetWidth + 15;
    let rect = config.hourlyWeatherDiv.getBoundingClientRect();
    let rect2 = config.currentWeatherDiv.getBoundingClientRect();

    if (this._page < this._totalHours / this._hoursPerPage) {
      config.hourlyWeatherDiv.style.right = this._page * this._hoursPerPage * width + 'px';
      this._page++;
      document.querySelector('.previous-btn').style.display = 'block';
    } else {
      document.querySelector('.next-btn').style.display = 'none';
    }
  }

  slideLeft() {
    let width = document.querySelector('.one-hour').offsetWidth + 15;

    if (this._page > 1) {
      config.hourlyWeatherDiv.style.right = (this._page - 2) * this._hoursPerPage * width + 'px';
      this._page--;
      document.querySelector('.next-btn').style.display = 'block';
    } else {
      document.querySelector('.previous-btn').style.display = 'none';
    }
  }

}

var _default = new HourlyView();

exports.default = _default;