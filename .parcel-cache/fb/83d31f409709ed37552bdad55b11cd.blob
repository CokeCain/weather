"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View.js"));

var config = _interopRequireWildcard(require("../config.js"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class AlertView extends _View.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_parentElement", config.informationModal);

    _defineProperty(this, "_modal", config.informationModal);
  }

  _generateMarkup() {
    return `
    <div class="close_modal close_modal-alert"><i class="far fa-times-circle"></i></div>
    <div class="information-modal-title">
        <p>Weather alerts</p>
    </div>
    <div class="information-modal-content">
      <p class="event">${this._data.event}</p>
      <p class="description">${this._data.description}</p>
      <p class="sender">${this._data.sender_name}</p>
    </div>`;
  }

  showModal(data) {
    config.overlay.style.display = 'block'; // config.modal.style.display = 'block';

    this._parentElement.style.display = 'block';
    this.render(data);
  }

  closeModal() {
    config.overlay.style.display = 'none'; // config.modal.style.display = 'none';

    this._parentElement.display = 'none';

    this._clear();
  }

}

var _default = new AlertView();

exports.default = _default;